{
  "version": 3,
  "sources": ["../../buildInfraLambda.ts", "../../../../driven/toS3Aws/terraform-file.s3.repository.ts", "../../../../../bounded-contexts/build-infra/domain/enums/providers.enum.ts", "../../../../../bounded-contexts/build-infra/domain/utils/transformJsonToTerraform.ts", "../../../../../bounded-contexts/build-infra/domain/entities/provider.ts", "../../../../../bounded-contexts/build-infra/app/dto/provider.dto.ts", "../../../../../bounded-contexts/build-infra/app/mappers/provider.mapper.ts", "../../../../../bounded-contexts/build-infra/domain/enums/resources.enum.ts", "../../../../../bounded-contexts/build-infra/domain/entities/resource.ts", "../../../../../bounded-contexts/build-infra/app/dto/resource.dto.ts", "../../../../../bounded-contexts/build-infra/app/mappers/resource.mapper.ts", "../../../../../bounded-contexts/build-infra/app/use-cases/create-terraform.usecase.ts"],
  "sourcesContent": ["import { Handler, APIGatewayProxyEvent, APIGatewayProxyResult } from 'aws-lambda';\nimport { S3TerraformRepository } from '../../driven/toS3Aws/terraform-file.s3.repository';\nimport { CreateFileInfraUseCase } from '../../../bounded-contexts/build-infra/app/use-cases/create-terraform.usecase';\nimport { ProviderMapper } from '../../../bounded-contexts/build-infra/app/mappers/provider.mapper';\nimport { ProviderDto } from '../../../bounded-contexts/build-infra/app/dto/provider.dto';\nimport { ResourceDto } from '../../../bounded-contexts/build-infra/app/dto/resource.dto';\nimport { ResourceMapper } from '../../../bounded-contexts/build-infra/app/mappers/resource.mapper';\n\nconst S3_BUCKET = process.env.S3_BUCKET || ''\nconst s3Repository = new S3TerraformRepository(S3_BUCKET)\n\n\nexport const handler:Handler = async (event:APIGatewayProxyEvent):Promise<APIGatewayProxyResult> => {\n\n  try {\n      if (!event.body) throw \"no body\"\n      const {providers, resources} = JSON.parse(event.body)\n      const usecase = new CreateFileInfraUseCase(s3Repository)\n      let providersDto: ProviderDto[] = []\n\n      providers.map((provider:ProviderDto) => {\n        providersDto.push(ProviderMapper.toDto(provider)) \n      })\n\n      let resourcesDto: ResourceDto[] = []\n\n      resources.map((resource:ResourceDto) => {\n        resourcesDto.push(ResourceMapper.toDto(resource))\n      })\n      \n      const result = await usecase.execute(providersDto, resourcesDto)\n      return {\n          statusCode: 201,\n          body: JSON.stringify({\n            message: \"FILE BUILD SUCCESSFULY\",\n            resulta: result,\n            dto: {resourcesDto, providersDto},\n            body : event.body\n          }),\n        };\n\n    } catch (e:any) {\n        return {\n            statusCode: 500,\n            body: JSON.stringify({\n              message: \"INTERNAL ERROR\",\n              error: e,\n            }),\n          };\n    }\n}\n", "import { S3 } from \"aws-sdk\"\nimport { BuildInfraRepository } from '../../../bounded-contexts/build-infra/domain/repositories/build-infra.repository';\n\nexport class S3TerraformRepository implements BuildInfraRepository {\n\n  private s3: S3\n  private bucketName: string\n\n  constructor(bucketName: string){\n    this.s3 = new S3()\n    this.bucketName = bucketName\n  }\n    \n  async saveTerraformFile(data: string) {\n    const random = Math.floor(Math.random() * 100000)\n    const fileName = `/users-file/${random}/main.tf`\n\n    const params = {\n      Bucket: this.bucketName,\n      Key: fileName,\n      Body: data,\n      ContentType: 'application/octet-stream'\n    };\n    try {\n      const response = await this.s3.upload(params).promise();\n      return `File uploaded successfully at ${response.Location}`;\n    } catch (err) {\n      throw err\n    } \n  }\n}", "import { IProviderAWS, IProviderAzure, IProviderGoogle } from \"../interfaces/provider.interface\";\n\nexport enum ProvidersEnum {\n    AWS = \"aws\",\n    AZURE = \"azurerm\",\n    GOOGLE = \"google\"\n}\n\n\nexport type ProviderAttributes = {\n    [ProvidersEnum.GOOGLE]: IProviderGoogle\n    [ProvidersEnum.AWS]: IProviderAWS\n    [ProvidersEnum.AZURE]: IProviderAzure\n    \n};\n\nexport const beginTerraFormFileProvidersRequired = \n`terraform { \n    required_providers { \n        aws = { \n            source = \"hashicorp/aws\"\n            version = \"5.51.1\"\n        }\n        azurerm = {\n            source = \"hashicorp/azurerm\"\n            version = \"3.105.0\"\n        }\n        google = {\n            source = \"hashicorp/google\"\n            version = \"5.30.0\"\n        }\n    }\n}\n\n`", "export function transformToTerraform(atributes:object, indent = 1) {\n    let terraformString: string = ''\n    for (const [key, value] of Object.entries(atributes)) {\n        if (typeof value === 'object') {\n            terraformString += `${'    '.repeat(indent)}${key} {\\n`;\n            terraformString += transformToTerraform(value, indent + 1);\n            terraformString += `${'    '.repeat(indent)}}\\n`;\n        } else {\n            terraformString += `${'    '.repeat(indent)}${key} = \"${value}\"\\n`;\n        }\n    }\n\n    if (indent === 1) terraformString += `}\\n\\n`;\n    \n    return terraformString;\n}", "import {  ProviderAttributes, ProvidersEnum } from \"../enums/providers.enum\"\nimport { transformToTerraform } from \"../utils/transformJsonToTerraform\"\n\n\nexport class Provider<T extends ProvidersEnum> {\n    private readonly name: T\n    private attributes: ProviderAttributes[T]\n\n    constructor(provider: T, attributes: ProviderAttributes[T]){\n        this.name = provider\n        this.attributes = attributes\n    }\n\n    buildProvider(): string {\n        return `provider \"${this.name}\" {\\n${transformToTerraform(this.attributes)}`\n    }\n}\n\n// const toto = new Provider(ProvidersEnum.AWS, {features: \"aa\", region: \"aa\"})", "import { ProviderAttributes, ProvidersEnum } from \"../../domain/enums/providers.enum\"\n\nexport class ProviderDto {\n    \n    constructor(\n        public name: ProvidersEnum,\n        public attributes: ProviderAttributes[ProvidersEnum]\n    ){}\n}", "import { Provider } from \"../../domain/entities/provider\";\nimport { ProvidersEnum } from \"../../domain/enums/providers.enum\";\nimport { ProviderDto } from \"../dto/provider.dto\";\n\nexport class ProviderMapper {\n    static toDomaine(dto: ProviderDto): Provider<ProvidersEnum> {\n        return new Provider(dto.name, dto.attributes)\n    }\n\n    static toDto(payload: ProviderDto): ProviderDto {\n        return new ProviderDto(payload.name, payload.attributes)\n    }\n}", "export enum ResourceEnum {\n\n    // AWS\n    AWS_EC2 = 1,\n    AWS_S3,\n    AWS_DYNAMO_DB ,\n    AWS_CLOUDFRONT,\n    AWS_SECURITY_GROUP,\n    AWS_RDS,\n    AWS_ECS,\n    AWS_LAUNCH_CONFIG,\n    AWS_VPC,\n    AWS_SUBNET,\n    AWS_ASG,\n    AWS_DB_SUBNET,\n    AWS_DOC_DB_CLUSTER,\n    AWS_DOC_DB_CLUS_INSTANCE,\n    AWS_DB_INSTANCE,\n    AWS_ECS_TASK_DEF,\n\n\n\n    // AZURE\n    AZ_VPC = 101,\n    AZ_VPC_SUB,\n    AZ_VPC_SG,\n    AZ_VM,\n    AZ_STORAGE,\n    AZ_MS_SQL_SERVER,\n    AZ_MS_SQL_DB,\n    AZ_COSMOS_DB_ACC,\n    AZ_COSMOS_DB,\n    AZ_COSMOS_DB_CONTAINER,\n    AZ_REDIS,\n    AZ_FW_RULE,\n\n\n\n    // GOOGLE\n    GCP_VPC = 201,\n    GCP_SUB_VPC,\n    GCP_FW,\n    GCP_VM_GROUP,\n    GCP_VM_TEMPLATE,\n    GCP_CACHE,\n    GCP_BUCKET,\n    GCP_DB,\n\n}\n\nexport const ResourceMap: { [key in ResourceEnum]: string } = {\n    [ResourceEnum.AWS_EC2]: \"aws_instance\",\n    [ResourceEnum.AWS_S3]: \"aws_s3_bucket\",\n    [ResourceEnum.AWS_DYNAMO_DB]: \"aws_dynamo_db_table\",\n    [ResourceEnum.AWS_CLOUDFRONT]: \"aws_cloudfront_distribution\",\n    [ResourceEnum.AWS_SECURITY_GROUP]: \"aws_security_group\",\n    [ResourceEnum.AWS_RDS]: \"aws_rds_instance\",\n    [ResourceEnum.AWS_ECS]: \"aws_ecs_cluster\",\n    [ResourceEnum.AWS_LAUNCH_CONFIG]: \"aws_launch_configuration\",\n    [ResourceEnum.AWS_VPC]: \"aws_vpc\",\n    [ResourceEnum.AWS_SUBNET]: \"aws_subnet\",\n    [ResourceEnum.AWS_ASG]: \"aws_auto_scaling_group\",\n    [ResourceEnum.AWS_DB_SUBNET]: \"aws_db_subnet_group\",\n    [ResourceEnum.AWS_DOC_DB_CLUSTER]: \"aws_documentdb_cluster\",\n    [ResourceEnum.AWS_DOC_DB_CLUS_INSTANCE]: \"aws_documentdb_cluster_instance\",\n    [ResourceEnum.AWS_DB_INSTANCE]: \"aws_db_instance\",\n    [ResourceEnum.AWS_ECS_TASK_DEF]: \"aws_ecs_task_definition\",\n\n    [ResourceEnum.AZ_VPC]: \"azurerm_virtual_network\",\n    [ResourceEnum.AZ_VPC_SUB]: \"azurerm_subnet\",\n    [ResourceEnum.AZ_VPC_SG]: \"azurerm_network_security_group\",\n    [ResourceEnum.AZ_VM]: \"azurerm_virtual_machine\",\n    [ResourceEnum.AZ_STORAGE]: \"azurerm_storage_account\",\n    [ResourceEnum.AZ_MS_SQL_SERVER]: \"azurerm_mssql_server\",\n    [ResourceEnum.AZ_MS_SQL_DB]: \"azurerm_mssql_database\",\n    [ResourceEnum.AZ_COSMOS_DB_ACC]: \"azurerm_cosmosdb_account\",\n    [ResourceEnum.AZ_COSMOS_DB]: \"azurerm_cosmosdb_database\",\n    [ResourceEnum.AZ_COSMOS_DB_CONTAINER]: \"azurerm_cosmosdb_container\",\n    [ResourceEnum.AZ_REDIS]: \"azurerm_redis_cache\",\n    [ResourceEnum.AZ_FW_RULE]: \"azurerm_network_security_rule\",\n\n    [ResourceEnum.GCP_VPC]: \"google_compute_network\",\n    [ResourceEnum.GCP_SUB_VPC]: \"google_compute_subnetwork\",\n    [ResourceEnum.GCP_FW]: \"google_compute_firewall\",\n    [ResourceEnum.GCP_VM_GROUP]: \"google_compute_managed_instance_group\",\n    [ResourceEnum.GCP_VM_TEMPLATE]: \"google_compute_instance_template\",\n    [ResourceEnum.GCP_CACHE]: \"google_cloud_memorystore_instance\",\n    [ResourceEnum.GCP_BUCKET]: \"google_storage_bucket\",\n    [ResourceEnum.GCP_DB]: \"google_sql_database\"\n \n};\n\n", "import {  ResourceEnum, ResourceMap } from \"../enums/resources.enum\"\nimport { ResourceAttributes } from \"../interfaces/resource-attributes.interface\"\nimport { transformToTerraform } from \"../utils/transformJsonToTerraform\"\n\n\nexport class Resource<T extends ResourceEnum> {\n    private readonly resourceType: typeof ResourceMap[ResourceEnum]\n    readonly name: string\n    private attributes: ResourceAttributes[T]\n\n    constructor(resourceType: T, attributes: ResourceAttributes[T]){\n        this.resourceType = ResourceMap[resourceType]\n        this.name = this.resourceType + '_infraPID_' + (Math.floor(Math.random() * 1000000) + 1)\n        this.attributes = attributes\n    }\n\n    buildResource(): string {\n        return `resource \"${this.resourceType}\" \"${this.name}\" {\\n${transformToTerraform(this.attributes)}`\n    }\n\n}", "import { ResourceEnum } from \"../../domain/enums/resources.enum\";\nimport { ResourceAttributes } from \"../../domain/interfaces/resource-attributes.interface\";\n\nexport class ResourceDto {\n\n    constructor(\n        public resourceType: ResourceEnum,\n        public attributes: ResourceAttributes[ResourceEnum],\n        public name?: string\n    ){}\n\n    \n\n}", "import { Resource } from \"../../domain/entities/resource\";\nimport { ResourceEnum } from \"../../domain/enums/resources.enum\";\nimport { ResourceDto } from \"../dto/resource.dto\";\n\nexport class ResourceMapper {\n    static toDomaine(dto: ResourceDto): Resource<ResourceEnum> {\n        return new Resource(dto.resourceType, dto.attributes)\n    }\n\n    static toDto(payload: ResourceDto): ResourceDto {\n        return new ResourceDto(payload.resourceType, payload.attributes)\n    }\n}", "import { beginTerraFormFileProvidersRequired } from \"../../domain/enums/providers.enum\"\nimport { BuildInfraRepository } from \"../../domain/repositories/build-infra.repository\"\nimport { ProviderDto } from \"../dto/provider.dto\"\nimport { ResourceDto } from \"../dto/resource.dto\"\nimport { ProviderMapper } from \"../mappers/provider.mapper\"\nimport { ResourceMapper } from \"../mappers/resource.mapper\"\n\nexport class CreateFileInfraUseCase {\n\n    constructor(private buildInfraRepository: BuildInfraRepository){}\n\n    async execute(providersDto: ProviderDto[], resourcesDto: ResourceDto[]): Promise<void> {\n        let tmpFile: string = beginTerraFormFileProvidersRequired\n        providersDto.map((providerDto: ProviderDto) => {\n            const provider = ProviderMapper.toDomaine(providerDto)\n            tmpFile+= provider.buildProvider()\n        })\n        resourcesDto.map((resourceDto: ResourceDto) => {\n            const resource = ResourceMapper.toDomaine(resourceDto)\n            tmpFile+= resource.buildResource()\n        })\n        await this.buildInfraRepository.saveTerraformFile(tmpFile)\n    }\n}"],
  "mappings": "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",
  "names": ["buildInfraLambda_exports", "__export", "handler", "__toCommonJS", "import_aws_sdk", "S3TerraformRepository", "bucketName", "data", "fileName", "params", "err", "beginTerraFormFileProvidersRequired", "transformToTerraform", "atributes", "indent", "terraformString", "key", "value", "Provider", "provider", "attributes", "transformToTerraform", "ProviderDto", "name", "attributes", "ProviderMapper", "dto", "Provider", "payload", "ProviderDto", "ResourceMap", "Resource", "resourceType", "attributes", "ResourceMap", "transformToTerraform", "ResourceDto", "resourceType", "attributes", "name", "ResourceMapper", "dto", "Resource", "payload", "ResourceDto", "CreateFileInfraUseCase", "buildInfraRepository", "providersDto", "resourcesDto", "tmpFile", "beginTerraFormFileProvidersRequired", "providerDto", "provider", "ProviderMapper", "resourceDto", "resource", "ResourceMapper", "S3_BUCKET", "s3Repository", "S3TerraformRepository", "handler", "event", "providers", "resources", "usecase", "CreateFileInfraUseCase", "providersDto", "provider", "ProviderMapper", "resourcesDto", "resource", "ResourceMapper", "result", "e"]
}
