{
  "version": 3,
  "sources": ["../../getAllArchiLambda.ts", "../../../../../bounded-contexts/build-infra/app/use-cases/get-all-templates.usecase.ts", "../../../../driven/dynamodb-architecture/dynamodb.repository.ts"],
  "sourcesContent": ["import { GetAllArchiTemplateUseCase } from '../../../bounded-contexts/build-infra/app/use-cases/get-all-templates.usecase';\nimport { Handler, APIGatewayProxyEvent, APIGatewayProxyResult } from 'aws-lambda';\nimport { AddArchiTemplateUseCase } from '../../../bounded-contexts/build-infra/app/use-cases/add-archi-template.usecase';\nimport { DynamoDbArchitectureRepository } from '../../driven/dynamodb-architecture/dynamodb.repository';\nimport { ArchitectureMapper } from '../../../bounded-contexts/build-infra/app/mappers/architecture.mapper';\nimport { Architecture } from '../../../bounded-contexts/build-infra/domain/entities/architecture';\n\nconst DYNAMODB_TABLE = process.env.DYNAMODB_TABLE || ''\nconst architectureRepository = new DynamoDbArchitectureRepository(DYNAMODB_TABLE)\n\n\nexport const handler:Handler = async (event:APIGatewayProxyEvent):Promise<APIGatewayProxyResult> => {\n    try {\n        const usecase = await new GetAllArchiTemplateUseCase(architectureRepository).execute()\n        return {\n            statusCode: 200,\n            body: JSON.stringify({\n              message: usecase\n            })\n          };\n    } catch (e) {\n        return {\n            statusCode: 500,\n            body: JSON.stringify({\n              message: \"INTERNAL ERROR\",\n              error: e\n            }),\n          };\n    }\n  \n}\n", "import { Architecture } from \"../../domain/entities/architecture\"\nimport { ArchitectureRepository } from \"../../domain/repositories/architecture.repository\"\n\nexport class GetAllArchiTemplateUseCase {\n\n    constructor(private architectureRepository: ArchitectureRepository){}\n\n    async execute(): Promise<Architecture[]> {\n        return await this.architectureRepository.getAllArchis()\n    }\n}", "import { DynamoDB } from 'aws-sdk';\nimport { ArchitectureRepository } from '../../../bounded-contexts/build-infra/domain/repositories/architecture.repository';\nimport { Architecture } from '../../../bounded-contexts/build-infra/domain/entities/architecture';\n\n\nexport class DynamoDbArchitectureRepository implements ArchitectureRepository {\n\n    private dynamo = new DynamoDB.DocumentClient();\n\n    constructor(private tableName: string){}\n\n    async addTemplateToPersistence(architecture: Architecture):Promise<DynamoDB.DocumentClient.PutItemOutput> {\n        try {\n            return await this.dynamo.put({TableName: this.tableName, Item: architecture}).promise()\n        } catch (error) {\n            console.error('Error adding item to DynamoDB:', error);\n            throw error\n        }\n    }\n\n    async removeTemplateFromPersistence(id: string): Promise<DynamoDB.DocumentClient.DeleteItemOutput> {\n        try {\n            return await this.dynamo.delete({TableName: this.tableName, Key: {id}}).promise()\n        } catch (error) {\n            console.error('Error deleting item to DynamoDB:', error);\n            throw error;\n        }\n    }\n\n    async updateTemplateFromPersistence(id: string): Promise<any> {\n        throw \"Method Not Implemented\"\n    }\n\n    async getArchisByOptions(options: {}): Promise<Architecture[]> {\n        return []\n    }\n\n    async getAllArchis(): Promise<Architecture[]> {\n        try {\n            const result = await this.dynamo.scan({TableName: this.tableName}).promise()\n            return result.Items as Architecture[]\n        } catch (error) {\n            console.error('Error getting all items from DynamoDB:', error);\n            throw error;\n        }\n    }\n\n    async getOneArchiById(id: string): Promise<Architecture> {\n        try {\n            const result = await this.dynamo.get({TableName: this.tableName, Key: {id}}).promise()\n            return result.Item as Architecture\n        } catch (error) {\n            console.error('Error getting item from DynamoDB:', error);\n            throw error;\n        }\n    }\n}"],
  "mappings": "4ZAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GCGO,IAAMI,EAAN,KAAiC,CAEpC,YAAoBC,EAA+C,CAA/C,4BAAAA,CAAgD,CAEpE,MAAM,SAAmC,CACrC,OAAO,MAAM,KAAK,uBAAuB,aAAa,CAC1D,CACJ,ECVA,IAAAC,EAAyB,mBAKZC,EAAN,KAAuE,CAI1E,YAAoBC,EAAkB,CAAlB,eAAAA,EAFpB,KAAQ,OAAS,IAAI,WAAS,cAES,CAEvC,MAAM,yBAAyBC,EAA2E,CACtG,GAAI,CACA,OAAO,MAAM,KAAK,OAAO,IAAI,CAAC,UAAW,KAAK,UAAW,KAAMA,CAAY,CAAC,EAAE,QAAQ,CAC1F,OAASC,EAAO,CACZ,cAAQ,MAAM,iCAAkCA,CAAK,EAC/CA,CACV,CACJ,CAEA,MAAM,8BAA8BC,EAA+D,CAC/F,GAAI,CACA,OAAO,MAAM,KAAK,OAAO,OAAO,CAAC,UAAW,KAAK,UAAW,IAAK,CAAC,GAAAA,CAAE,CAAC,CAAC,EAAE,QAAQ,CACpF,OAASD,EAAO,CACZ,cAAQ,MAAM,mCAAoCA,CAAK,EACjDA,CACV,CACJ,CAEA,MAAM,8BAA8BC,EAA0B,CAC1D,KAAM,wBACV,CAEA,MAAM,mBAAmBC,EAAsC,CAC3D,MAAO,CAAC,CACZ,CAEA,MAAM,cAAwC,CAC1C,GAAI,CAEA,OADe,MAAM,KAAK,OAAO,KAAK,CAAC,UAAW,KAAK,SAAS,CAAC,EAAE,QAAQ,GAC7D,KAClB,OAASF,EAAO,CACZ,cAAQ,MAAM,yCAA0CA,CAAK,EACvDA,CACV,CACJ,CAEA,MAAM,gBAAgBC,EAAmC,CACrD,GAAI,CAEA,OADe,MAAM,KAAK,OAAO,IAAI,CAAC,UAAW,KAAK,UAAW,IAAK,CAAC,GAAAA,CAAE,CAAC,CAAC,EAAE,QAAQ,GACvE,IAClB,OAASD,EAAO,CACZ,cAAQ,MAAM,oCAAqCA,CAAK,EAClDA,CACV,CACJ,CACJ,EFjDA,IAAMG,EAAiB,QAAQ,IAAI,gBAAkB,GAC/CC,EAAyB,IAAIC,EAA+BF,CAAc,EAGnEG,EAAkB,MAAOC,GAA8D,CAChG,GAAI,CACA,IAAMC,EAAU,MAAM,IAAIC,EAA2BL,CAAsB,EAAE,QAAQ,EACrF,MAAO,CACH,WAAY,IACZ,KAAM,KAAK,UAAU,CACnB,QAASI,CACX,CAAC,CACH,CACN,OAAS,EAAG,CACR,MAAO,CACH,WAAY,IACZ,KAAM,KAAK,UAAU,CACnB,QAAS,iBACT,MAAO,CACT,CAAC,CACH,CACN,CAEJ",
  "names": ["getAllArchiLambda_exports", "__export", "handler", "__toCommonJS", "GetAllArchiTemplateUseCase", "architectureRepository", "import_aws_sdk", "DynamoDbArchitectureRepository", "tableName", "architecture", "error", "id", "options", "DYNAMODB_TABLE", "architectureRepository", "DynamoDbArchitectureRepository", "handler", "event", "usecase", "GetAllArchiTemplateUseCase"]
}
