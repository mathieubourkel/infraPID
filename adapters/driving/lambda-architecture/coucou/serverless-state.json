{
  "service": {
    "service": "infrapid-archi",
    "serviceObject": {
      "name": "infrapid-archi"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs20.x",
      "region": "eu-west-3",
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:PutItem",
            "dynamodb:GetItem",
            "dynamodb:Scan",
            "dynamodb:Query",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem"
          ],
          "Resource": "arn:aws:dynamodb:eu-west-3:066669404296:table/infrapid-archi-architectureTable-dev"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:PutObject",
            "s3:GetObject",
            "s3:DeleteObject"
          ],
          "Resource": "arn:aws:s3:::infrapid-bucket/*"
        }
      ],
      "environment": {
        "DYNAMODB_TABLE": "infrapid-archi-architectureTable-dev",
        "S3_BUCKET": "infrapid-bucket"
      },
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "GetAllLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/infrapid-archi-dev-getAll"
            }
          },
          "GetOneByIdLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/infrapid-archi-dev-getOneById"
            }
          },
          "AddLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/infrapid-archi-dev-add"
            }
          },
          "DeleteLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/infrapid-archi-dev-delete"
            }
          },
          "UpdateLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/infrapid-archi-dev-update"
            }
          },
          "BuildInfraLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/infrapid-archi-dev-buildInfra"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "infrapid-archi",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/infrapid-archi-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/infrapid-archi-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][1]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "infrapid-archi",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "GetAllLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/infrapid-archi/dev/1717338471637-2024-06-02T14:27:51.637Z/infrapid-archi-getAll.zip"
              },
              "Handler": "getAllArchiLambda.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "infrapid-archi-dev-getAll",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_TABLE": "infrapid-archi-architectureTable-dev",
                  "S3_BUCKET": "infrapid-bucket",
                  "NODE_OPTIONS": "--enable-source-maps"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAllLogGroup"
            ]
          },
          "GetOneByIdLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/infrapid-archi/dev/1717338471637-2024-06-02T14:27:51.637Z/infrapid-archi-getOneById.zip"
              },
              "Handler": "getOneByIdArchiLambda.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "infrapid-archi-dev-getOneById",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_TABLE": "infrapid-archi-architectureTable-dev",
                  "S3_BUCKET": "infrapid-bucket",
                  "NODE_OPTIONS": "--enable-source-maps"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetOneByIdLogGroup"
            ]
          },
          "AddLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/infrapid-archi/dev/1717338471637-2024-06-02T14:27:51.637Z/infrapid-archi-add.zip"
              },
              "Handler": "addArchiLambda.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "infrapid-archi-dev-add",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_TABLE": "infrapid-archi-architectureTable-dev",
                  "S3_BUCKET": "infrapid-bucket",
                  "NODE_OPTIONS": "--enable-source-maps"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AddLogGroup"
            ]
          },
          "DeleteLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/infrapid-archi/dev/1717338471637-2024-06-02T14:27:51.637Z/infrapid-archi-delete.zip"
              },
              "Handler": "deleteArchiLambda.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "infrapid-archi-dev-delete",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_TABLE": "infrapid-archi-architectureTable-dev",
                  "S3_BUCKET": "infrapid-bucket",
                  "NODE_OPTIONS": "--enable-source-maps"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteLogGroup"
            ]
          },
          "UpdateLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/infrapid-archi/dev/1717338471637-2024-06-02T14:27:51.637Z/infrapid-archi-update.zip"
              },
              "Handler": "updateArchiLambda.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "infrapid-archi-dev-update",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_TABLE": "infrapid-archi-architectureTable-dev",
                  "S3_BUCKET": "infrapid-bucket",
                  "NODE_OPTIONS": "--enable-source-maps"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateLogGroup"
            ]
          },
          "BuildInfraLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/infrapid-archi/dev/1717338471637-2024-06-02T14:27:51.637Z/infrapid-archi-buildInfra.zip"
              },
              "Handler": "buildInfraLambda.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "infrapid-archi-dev-buildInfra",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_TABLE": "infrapid-archi-architectureTable-dev",
                  "S3_BUCKET": "infrapid-bucket",
                  "NODE_OPTIONS": "--enable-source-maps"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "BuildInfraLogGroup"
            ]
          },
          "UpdateLambdaVersionqclnQmzVFFsPvLMd4E1KJGiY0CV3VKqcwRDDOwhL4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateLambdaFunction"
              },
              "CodeSha256": "am8I/VTvP6xb834hzTla/bhRTg9yKBG+C9fmxRXzDDs="
            }
          },
          "GetAllLambdaVersionGS8IAGvxBv8kJ1m1wSzETs6YlLvspApGMd46ocreSjc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllLambdaFunction"
              },
              "CodeSha256": "rjL01lhOvElp3L52di7FJ0RFo7TUl2gQzGEyJjY1ilA="
            }
          },
          "BuildInfraLambdaVersion6Y8gdyRlBeLdWz3mg4Sme8s9lsBBnkR7SmXsmdP1L5E": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "BuildInfraLambdaFunction"
              },
              "CodeSha256": "Esw5SkklQDabScmIxR7xkn+sbe7757U/7rDRYmpxqac="
            }
          },
          "GetOneByIdLambdaVersionmZ0ENpxLiE4V9Zcv79zEYeRa6ZrRldaFWMAxhFf2eXg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetOneByIdLambdaFunction"
              },
              "CodeSha256": "riCEFXvveuM0HfGOAgTeYkKvWL1NsRxl6HNb1Ebvp/M="
            }
          },
          "AddLambdaVersionyj5MbkrTJOpX7RCR3uDoTnLed6gereLPnpeNipBa3w": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AddLambdaFunction"
              },
              "CodeSha256": "GZiDnq3O4ilJH3OsrhtHq9vi/x6ZiiFmCuOC1yxe2Og="
            }
          },
          "DeleteLambdaVersionDIwNjKfTeWJRYqwknMJtX5jzewWURGvTk2DTBkW7VI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteLambdaFunction"
              },
              "CodeSha256": "CLJg3ZwrxXpt9USj3hnv9WGHN4qxG69V7bvXDEI3/l8="
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-infrapid-archi",
              "ProtocolType": "HTTP"
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "GetAllLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetAll": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetAllLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetTemplatesAll": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /templates/all",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetAll"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetAll"
          },
          "GetOneByIdLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetOneByIdLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetOneById": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetOneByIdLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetTemplateId": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /template/:id",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetOneById"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetOneById"
          },
          "AddLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AddLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationAdd": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AddLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostTemplate": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /template",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationAdd"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationAdd"
          },
          "DeleteLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDelete": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DeleteLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteTemplateId": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /template/:id",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDelete"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDelete"
          },
          "UpdateLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdate": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutTemplateId": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /template/:id",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdate"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdate"
          },
          "BuildInfraLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "BuildInfraLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationBuildInfra": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"BuildInfraLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostBuildDashinfra": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /build-infra",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationBuildInfra"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationBuildInfra"
          },
          "ArchitectureTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "TableName": "infrapid-archi-architectureTable-dev",
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              }
            }
          },
          "S3Bucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "infrapid-bucket"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-infrapid-archi-dev-ServerlessDeploymentBucketName"
            }
          },
          "UpdateLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateLambdaVersionqclnQmzVFFsPvLMd4E1KJGiY0CV3VKqcwRDDOwhL4"
            },
            "Export": {
              "Name": "sls-infrapid-archi-dev-UpdateLambdaFunctionQualifiedArn"
            }
          },
          "GetAllLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllLambdaVersionGS8IAGvxBv8kJ1m1wSzETs6YlLvspApGMd46ocreSjc"
            },
            "Export": {
              "Name": "sls-infrapid-archi-dev-GetAllLambdaFunctionQualifiedArn"
            }
          },
          "BuildInfraLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "BuildInfraLambdaVersion6Y8gdyRlBeLdWz3mg4Sme8s9lsBBnkR7SmXsmdP1L5E"
            },
            "Export": {
              "Name": "sls-infrapid-archi-dev-BuildInfraLambdaFunctionQualifiedArn"
            }
          },
          "GetOneByIdLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetOneByIdLambdaVersionmZ0ENpxLiE4V9Zcv79zEYeRa6ZrRldaFWMAxhFf2eXg"
            },
            "Export": {
              "Name": "sls-infrapid-archi-dev-GetOneByIdLambdaFunctionQualifiedArn"
            }
          },
          "AddLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AddLambdaVersionyj5MbkrTJOpX7RCR3uDoTnLed6gereLPnpeNipBa3w"
            },
            "Export": {
              "Name": "sls-infrapid-archi-dev-AddLambdaFunctionQualifiedArn"
            }
          },
          "DeleteLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteLambdaVersionDIwNjKfTeWJRYqwknMJtX5jzewWURGvTk2DTBkW7VI"
            },
            "Export": {
              "Name": "sls-infrapid-archi-dev-DeleteLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-infrapid-archi-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-infrapid-archi-dev-HttpApiUrl"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "pluginsData": {},
    "functions": {
      "getAll": {
        "handler": "getAllArchiLambda.handler",
        "events": [
          {
            "httpApi": {
              "path": "/templates/all",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/templates/all"
          }
        ],
        "name": "infrapid-archi-dev-getAll",
        "environment": {
          "NODE_OPTIONS": "--enable-source-maps"
        },
        "package": {
          "artifact": "/home/mathieu/dev/infraPID/adapters/driving/lambda-architecture/.serverless/build/infrapid-archi-getAll.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetAllLambdaVersionGS8IAGvxBv8kJ1m1wSzETs6YlLvspApGMd46ocreSjc"
      },
      "getOneById": {
        "handler": "getOneByIdArchiLambda.handler",
        "events": [
          {
            "httpApi": {
              "path": "/template/:id",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/template/:id"
          }
        ],
        "name": "infrapid-archi-dev-getOneById",
        "environment": {
          "NODE_OPTIONS": "--enable-source-maps"
        },
        "package": {
          "artifact": "/home/mathieu/dev/infraPID/adapters/driving/lambda-architecture/.serverless/build/infrapid-archi-getOneById.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetOneByIdLambdaVersionmZ0ENpxLiE4V9Zcv79zEYeRa6ZrRldaFWMAxhFf2eXg"
      },
      "add": {
        "handler": "addArchiLambda.handler",
        "events": [
          {
            "httpApi": {
              "path": "/template",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/template"
          }
        ],
        "name": "infrapid-archi-dev-add",
        "environment": {
          "NODE_OPTIONS": "--enable-source-maps"
        },
        "package": {
          "artifact": "/home/mathieu/dev/infraPID/adapters/driving/lambda-architecture/.serverless/build/infrapid-archi-add.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "AddLambdaVersionyj5MbkrTJOpX7RCR3uDoTnLed6gereLPnpeNipBa3w"
      },
      "delete": {
        "handler": "deleteArchiLambda.handler",
        "events": [
          {
            "httpApi": {
              "path": "/template/:id",
              "method": "delete"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/template/:id"
          }
        ],
        "name": "infrapid-archi-dev-delete",
        "environment": {
          "NODE_OPTIONS": "--enable-source-maps"
        },
        "package": {
          "artifact": "/home/mathieu/dev/infraPID/adapters/driving/lambda-architecture/.serverless/build/infrapid-archi-delete.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "DeleteLambdaVersionDIwNjKfTeWJRYqwknMJtX5jzewWURGvTk2DTBkW7VI"
      },
      "update": {
        "handler": "updateArchiLambda.handler",
        "events": [
          {
            "httpApi": {
              "path": "/template/:id",
              "method": "put"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/template/:id"
          }
        ],
        "name": "infrapid-archi-dev-update",
        "environment": {
          "NODE_OPTIONS": "--enable-source-maps"
        },
        "package": {
          "artifact": "/home/mathieu/dev/infraPID/adapters/driving/lambda-architecture/.serverless/build/infrapid-archi-update.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "UpdateLambdaVersionqclnQmzVFFsPvLMd4E1KJGiY0CV3VKqcwRDDOwhL4"
      },
      "buildInfra": {
        "handler": "buildInfraLambda.handler",
        "events": [
          {
            "httpApi": {
              "path": "/build-infra",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/build-infra"
          }
        ],
        "name": "infrapid-archi-dev-buildInfra",
        "environment": {
          "NODE_OPTIONS": "--enable-source-maps"
        },
        "package": {
          "artifact": "/home/mathieu/dev/infraPID/adapters/driving/lambda-architecture/.serverless/build/infrapid-archi-buildInfra.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "BuildInfraLambdaVersion6Y8gdyRlBeLdWz3mg4Sme8s9lsBBnkR7SmXsmdP1L5E"
      }
    },
    "resources": {
      "Resources": {
        "ArchitectureTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "TableName": "infrapid-archi-architectureTable-dev",
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            }
          }
        },
        "S3Bucket": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "BucketName": "infrapid-bucket"
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "org": "mbourkel",
      "app": "infrapid",
      "service": "infrapid-archi",
      "stages": {
        "dev": {
          "region": "eu-west-3"
        },
        "prod": {
          "region": "eu-west-3"
        }
      },
      "package": {
        "individually": true,
        "artifactsS3KeyDirname": "serverless/infrapid-archi/dev/code-artifacts",
        "artifactDirectoryName": "serverless/infrapid-archi/dev/1717338471637-2024-06-02T14:27:51.637Z"
      },
      "build": {
        "esbuild": {
          "bundle": true,
          "minify": true,
          "external": [
            "aws-sdk"
          ]
        }
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "app": "infrapid",
    "appId": null,
    "org": "mbourkel",
    "orgId": null,
    "build": {
      "$ref": "$[\"service\"][\"initialServerlessConfig\"][\"build\"]"
    },
    "layers": {}
  },
  "package": {
    "individually": true,
    "artifactDirectoryName": "serverless/infrapid-archi/dev/1717338471637-2024-06-02T14:27:51.637Z",
    "artifact": ""
  }
}